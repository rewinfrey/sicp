Excerise 1.5

Ben Bitdiddle has invented a test to determine whether the interpeter he is faced with is using
applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

(define (p) (p))

(define (test x y)
  (if (= x 0)
    0
    y))

Then he evaluates the expression

(test 0 (p))

What behavior will Ben observe with an interpreter that uses applicative-order evaluation?
What behavior will he observe with an interpeter that uses normal-order evaluation?
Explain your answers. (Assume that the evaluation rule for the special form `if` is the
same whether the interperter is using normal or applicative order: The predicate expression
is evaluated first, and the result determines whether to evaluate the consequent or
the alternative expression.

Given applicative-order evaluation
When Ben evalutes (test 0 (p))
The expression (p) is evaluated first,
Prior to (test 0 (p)),
Resulting in an infinite loop.

Given nornal order evaluation
When Ben evalutes (test 0 (p))
The expression (p) is not evaluted first,
And the predicate (= x 0) is evaluated,
Causing evaluation of the consequent
And the value 0 is returned.
